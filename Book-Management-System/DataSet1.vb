'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tabletblBookDetail2 As tblBookDetail2DataTable
    
    Private tabletblBookDetails1 As tblBookDetails1DataTable
    
    Private tabletbluser As tbluserDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblBookDetail2")) Is Nothing) Then
                Me.Tables.Add(New tblBookDetail2DataTable(ds.Tables("tblBookDetail2")))
            End If
            If (Not (ds.Tables("tblBookDetails1")) Is Nothing) Then
                Me.Tables.Add(New tblBookDetails1DataTable(ds.Tables("tblBookDetails1")))
            End If
            If (Not (ds.Tables("tbluser")) Is Nothing) Then
                Me.Tables.Add(New tbluserDataTable(ds.Tables("tbluser")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblBookDetail2 As tblBookDetail2DataTable
        Get
            Return Me.tabletblBookDetail2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblBookDetails1 As tblBookDetails1DataTable
        Get
            Return Me.tabletblBookDetails1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbluser As tbluserDataTable
        Get
            Return Me.tabletbluser
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tblBookDetail2")) Is Nothing) Then
            Me.Tables.Add(New tblBookDetail2DataTable(ds.Tables("tblBookDetail2")))
        End If
        If (Not (ds.Tables("tblBookDetails1")) Is Nothing) Then
            Me.Tables.Add(New tblBookDetails1DataTable(ds.Tables("tblBookDetails1")))
        End If
        If (Not (ds.Tables("tbluser")) Is Nothing) Then
            Me.Tables.Add(New tbluserDataTable(ds.Tables("tbluser")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletblBookDetail2 = CType(Me.Tables("tblBookDetail2"),tblBookDetail2DataTable)
        If (Not (Me.tabletblBookDetail2) Is Nothing) Then
            Me.tabletblBookDetail2.InitVars
        End If
        Me.tabletblBookDetails1 = CType(Me.Tables("tblBookDetails1"),tblBookDetails1DataTable)
        If (Not (Me.tabletblBookDetails1) Is Nothing) Then
            Me.tabletblBookDetails1.InitVars
        End If
        Me.tabletbluser = CType(Me.Tables("tbluser"),tbluserDataTable)
        If (Not (Me.tabletbluser) Is Nothing) Then
            Me.tabletbluser.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletblBookDetail2 = New tblBookDetail2DataTable
        Me.Tables.Add(Me.tabletblBookDetail2)
        Me.tabletblBookDetails1 = New tblBookDetails1DataTable
        Me.Tables.Add(Me.tabletblBookDetails1)
        Me.tabletbluser = New tbluserDataTable
        Me.Tables.Add(Me.tabletbluser)
    End Sub
    
    Private Function ShouldSerializetblBookDetail2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblBookDetails1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetbluser() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tblBookDetail2RowChangeEventHandler(ByVal sender As Object, ByVal e As tblBookDetail2RowChangeEvent)
    
    Public Delegate Sub tblBookDetails1RowChangeEventHandler(ByVal sender As Object, ByVal e As tblBookDetails1RowChangeEvent)
    
    Public Delegate Sub tbluserRowChangeEventHandler(ByVal sender As Object, ByVal e As tbluserRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetail2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookid As DataColumn
        
        Private columnbookname As DataColumn
        
        Private columnauthor As DataColumn
        
        Private columnpublication As DataColumn
        
        Private columnprice As DataColumn
        
        Private columntpages As DataColumn
        
        Friend Sub New()
            MyBase.New("tblBookDetail2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookidColumn As DataColumn
            Get
                Return Me.columnbookid
            End Get
        End Property
        
        Friend ReadOnly Property booknameColumn As DataColumn
            Get
                Return Me.columnbookname
            End Get
        End Property
        
        Friend ReadOnly Property authorColumn As DataColumn
            Get
                Return Me.columnauthor
            End Get
        End Property
        
        Friend ReadOnly Property publicationColumn As DataColumn
            Get
                Return Me.columnpublication
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property tpagesColumn As DataColumn
            Get
                Return Me.columntpages
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblBookDetail2Row
            Get
                Return CType(Me.Rows(index),tblBookDetail2Row)
            End Get
        End Property
        
        Public Event tblBookDetail2RowChanged As tblBookDetail2RowChangeEventHandler
        
        Public Event tblBookDetail2RowChanging As tblBookDetail2RowChangeEventHandler
        
        Public Event tblBookDetail2RowDeleted As tblBookDetail2RowChangeEventHandler
        
        Public Event tblBookDetail2RowDeleting As tblBookDetail2RowChangeEventHandler
        
        Public Overloads Sub AddtblBookDetail2Row(ByVal row As tblBookDetail2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblBookDetail2Row(ByVal bookid As String, ByVal bookname As String, ByVal author As String, ByVal publication As String, ByVal price As Integer, ByVal tpages As Integer) As tblBookDetail2Row
            Dim rowtblBookDetail2Row As tblBookDetail2Row = CType(Me.NewRow,tblBookDetail2Row)
            rowtblBookDetail2Row.ItemArray = New Object() {bookid, bookname, author, publication, price, tpages}
            Me.Rows.Add(rowtblBookDetail2Row)
            Return rowtblBookDetail2Row
        End Function
        
        Public Function FindBybookid(ByVal bookid As String) As tblBookDetail2Row
            Return CType(Me.Rows.Find(New Object() {bookid}),tblBookDetail2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblBookDetail2DataTable = CType(MyBase.Clone,tblBookDetail2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblBookDetail2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookid = Me.Columns("bookid")
            Me.columnbookname = Me.Columns("bookname")
            Me.columnauthor = Me.Columns("author")
            Me.columnpublication = Me.Columns("publication")
            Me.columnprice = Me.Columns("price")
            Me.columntpages = Me.Columns("tpages")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookid = New DataColumn("bookid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookid)
            Me.columnbookname = New DataColumn("bookname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookname)
            Me.columnauthor = New DataColumn("author", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnauthor)
            Me.columnpublication = New DataColumn("publication", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpublication)
            Me.columnprice = New DataColumn("price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columntpages = New DataColumn("tpages", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntpages)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnbookid}, true))
            Me.columnbookid.AllowDBNull = false
            Me.columnbookid.Unique = true
        End Sub
        
        Public Function NewtblBookDetail2Row() As tblBookDetail2Row
            Return CType(Me.NewRow,tblBookDetail2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblBookDetail2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblBookDetail2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblBookDetail2RowChangedEvent) Is Nothing) Then
                RaiseEvent tblBookDetail2RowChanged(Me, New tblBookDetail2RowChangeEvent(CType(e.Row,tblBookDetail2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblBookDetail2RowChangingEvent) Is Nothing) Then
                RaiseEvent tblBookDetail2RowChanging(Me, New tblBookDetail2RowChangeEvent(CType(e.Row,tblBookDetail2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblBookDetail2RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblBookDetail2RowDeleted(Me, New tblBookDetail2RowChangeEvent(CType(e.Row,tblBookDetail2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblBookDetail2RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblBookDetail2RowDeleting(Me, New tblBookDetail2RowChangeEvent(CType(e.Row,tblBookDetail2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblBookDetail2Row(ByVal row As tblBookDetail2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetail2Row
        Inherits DataRow
        
        Private tabletblBookDetail2 As tblBookDetail2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblBookDetail2 = CType(Me.Table,tblBookDetail2DataTable)
        End Sub
        
        Public Property bookid As String
            Get
                Return CType(Me(Me.tabletblBookDetail2.bookidColumn),String)
            End Get
            Set
                Me(Me.tabletblBookDetail2.bookidColumn) = value
            End Set
        End Property
        
        Public Property bookname As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetail2.booknameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetail2.booknameColumn) = value
            End Set
        End Property
        
        Public Property author As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetail2.authorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetail2.authorColumn) = value
            End Set
        End Property
        
        Public Property publication As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetail2.publicationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetail2.publicationColumn) = value
            End Set
        End Property
        
        Public Property price As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetail2.priceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetail2.priceColumn) = value
            End Set
        End Property
        
        Public Property tpages As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetail2.tpagesColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetail2.tpagesColumn) = value
            End Set
        End Property
        
        Public Function IsbooknameNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetail2.booknameColumn)
        End Function
        
        Public Sub SetbooknameNull()
            Me(Me.tabletblBookDetail2.booknameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsauthorNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetail2.authorColumn)
        End Function
        
        Public Sub SetauthorNull()
            Me(Me.tabletblBookDetail2.authorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspublicationNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetail2.publicationColumn)
        End Function
        
        Public Sub SetpublicationNull()
            Me(Me.tabletblBookDetail2.publicationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetail2.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tabletblBookDetail2.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstpagesNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetail2.tpagesColumn)
        End Function
        
        Public Sub SettpagesNull()
            Me(Me.tabletblBookDetail2.tpagesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetail2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblBookDetail2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblBookDetail2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblBookDetail2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetails1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookid As DataColumn
        
        Private columnbookname As DataColumn
        
        Private columnauthor As DataColumn
        
        Private columnpublication As DataColumn
        
        Private columnprice As DataColumn
        
        Private columntpages As DataColumn
        
        Private columngroups As DataColumn
        
        Friend Sub New()
            MyBase.New("tblBookDetails1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookidColumn As DataColumn
            Get
                Return Me.columnbookid
            End Get
        End Property
        
        Friend ReadOnly Property booknameColumn As DataColumn
            Get
                Return Me.columnbookname
            End Get
        End Property
        
        Friend ReadOnly Property authorColumn As DataColumn
            Get
                Return Me.columnauthor
            End Get
        End Property
        
        Friend ReadOnly Property publicationColumn As DataColumn
            Get
                Return Me.columnpublication
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property tpagesColumn As DataColumn
            Get
                Return Me.columntpages
            End Get
        End Property
        
        Friend ReadOnly Property groupsColumn As DataColumn
            Get
                Return Me.columngroups
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblBookDetails1Row
            Get
                Return CType(Me.Rows(index),tblBookDetails1Row)
            End Get
        End Property
        
        Public Event tblBookDetails1RowChanged As tblBookDetails1RowChangeEventHandler
        
        Public Event tblBookDetails1RowChanging As tblBookDetails1RowChangeEventHandler
        
        Public Event tblBookDetails1RowDeleted As tblBookDetails1RowChangeEventHandler
        
        Public Event tblBookDetails1RowDeleting As tblBookDetails1RowChangeEventHandler
        
        Public Overloads Sub AddtblBookDetails1Row(ByVal row As tblBookDetails1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblBookDetails1Row(ByVal bookid As String, ByVal bookname As String, ByVal author As String, ByVal publication As String, ByVal price As Integer, ByVal tpages As Integer, ByVal groups As String) As tblBookDetails1Row
            Dim rowtblBookDetails1Row As tblBookDetails1Row = CType(Me.NewRow,tblBookDetails1Row)
            rowtblBookDetails1Row.ItemArray = New Object() {bookid, bookname, author, publication, price, tpages, groups}
            Me.Rows.Add(rowtblBookDetails1Row)
            Return rowtblBookDetails1Row
        End Function
        
        Public Function FindBybookid(ByVal bookid As String) As tblBookDetails1Row
            Return CType(Me.Rows.Find(New Object() {bookid}),tblBookDetails1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblBookDetails1DataTable = CType(MyBase.Clone,tblBookDetails1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblBookDetails1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookid = Me.Columns("bookid")
            Me.columnbookname = Me.Columns("bookname")
            Me.columnauthor = Me.Columns("author")
            Me.columnpublication = Me.Columns("publication")
            Me.columnprice = Me.Columns("price")
            Me.columntpages = Me.Columns("tpages")
            Me.columngroups = Me.Columns("groups")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookid = New DataColumn("bookid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookid)
            Me.columnbookname = New DataColumn("bookname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookname)
            Me.columnauthor = New DataColumn("author", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnauthor)
            Me.columnpublication = New DataColumn("publication", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpublication)
            Me.columnprice = New DataColumn("price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columntpages = New DataColumn("tpages", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntpages)
            Me.columngroups = New DataColumn("groups", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroups)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnbookid}, true))
            Me.columnbookid.AllowDBNull = false
            Me.columnbookid.Unique = true
        End Sub
        
        Public Function NewtblBookDetails1Row() As tblBookDetails1Row
            Return CType(Me.NewRow,tblBookDetails1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblBookDetails1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblBookDetails1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblBookDetails1RowChangedEvent) Is Nothing) Then
                RaiseEvent tblBookDetails1RowChanged(Me, New tblBookDetails1RowChangeEvent(CType(e.Row,tblBookDetails1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblBookDetails1RowChangingEvent) Is Nothing) Then
                RaiseEvent tblBookDetails1RowChanging(Me, New tblBookDetails1RowChangeEvent(CType(e.Row,tblBookDetails1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblBookDetails1RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblBookDetails1RowDeleted(Me, New tblBookDetails1RowChangeEvent(CType(e.Row,tblBookDetails1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblBookDetails1RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblBookDetails1RowDeleting(Me, New tblBookDetails1RowChangeEvent(CType(e.Row,tblBookDetails1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblBookDetails1Row(ByVal row As tblBookDetails1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetails1Row
        Inherits DataRow
        
        Private tabletblBookDetails1 As tblBookDetails1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblBookDetails1 = CType(Me.Table,tblBookDetails1DataTable)
        End Sub
        
        Public Property bookid As String
            Get
                Return CType(Me(Me.tabletblBookDetails1.bookidColumn),String)
            End Get
            Set
                Me(Me.tabletblBookDetails1.bookidColumn) = value
            End Set
        End Property
        
        Public Property bookname As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.booknameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.booknameColumn) = value
            End Set
        End Property
        
        Public Property author As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.authorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.authorColumn) = value
            End Set
        End Property
        
        Public Property publication As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.publicationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.publicationColumn) = value
            End Set
        End Property
        
        Public Property price As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.priceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.priceColumn) = value
            End Set
        End Property
        
        Public Property tpages As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.tpagesColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.tpagesColumn) = value
            End Set
        End Property
        
        Public Property groups As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBookDetails1.groupsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBookDetails1.groupsColumn) = value
            End Set
        End Property
        
        Public Function IsbooknameNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.booknameColumn)
        End Function
        
        Public Sub SetbooknameNull()
            Me(Me.tabletblBookDetails1.booknameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsauthorNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.authorColumn)
        End Function
        
        Public Sub SetauthorNull()
            Me(Me.tabletblBookDetails1.authorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspublicationNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.publicationColumn)
        End Function
        
        Public Sub SetpublicationNull()
            Me(Me.tabletblBookDetails1.publicationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tabletblBookDetails1.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstpagesNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.tpagesColumn)
        End Function
        
        Public Sub SettpagesNull()
            Me(Me.tabletblBookDetails1.tpagesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupsNull() As Boolean
            Return Me.IsNull(Me.tabletblBookDetails1.groupsColumn)
        End Function
        
        Public Sub SetgroupsNull()
            Me(Me.tabletblBookDetails1.groupsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBookDetails1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblBookDetails1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblBookDetails1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblBookDetails1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbluserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnusername As DataColumn
        
        Private columnuserpassword As DataColumn
        
        Private columnusertype As DataColumn
        
        Friend Sub New()
            MyBase.New("tbluser")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property usernameColumn As DataColumn
            Get
                Return Me.columnusername
            End Get
        End Property
        
        Friend ReadOnly Property userpasswordColumn As DataColumn
            Get
                Return Me.columnuserpassword
            End Get
        End Property
        
        Friend ReadOnly Property usertypeColumn As DataColumn
            Get
                Return Me.columnusertype
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbluserRow
            Get
                Return CType(Me.Rows(index),tbluserRow)
            End Get
        End Property
        
        Public Event tbluserRowChanged As tbluserRowChangeEventHandler
        
        Public Event tbluserRowChanging As tbluserRowChangeEventHandler
        
        Public Event tbluserRowDeleted As tbluserRowChangeEventHandler
        
        Public Event tbluserRowDeleting As tbluserRowChangeEventHandler
        
        Public Overloads Sub AddtbluserRow(ByVal row As tbluserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtbluserRow(ByVal username As String, ByVal userpassword As String, ByVal usertype As String) As tbluserRow
            Dim rowtbluserRow As tbluserRow = CType(Me.NewRow,tbluserRow)
            rowtbluserRow.ItemArray = New Object() {username, userpassword, usertype}
            Me.Rows.Add(rowtbluserRow)
            Return rowtbluserRow
        End Function
        
        Public Function FindByusername(ByVal username As String) As tbluserRow
            Return CType(Me.Rows.Find(New Object() {username}),tbluserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tbluserDataTable = CType(MyBase.Clone,tbluserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tbluserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnusername = Me.Columns("username")
            Me.columnuserpassword = Me.Columns("userpassword")
            Me.columnusertype = Me.Columns("usertype")
        End Sub
        
        Private Sub InitClass()
            Me.columnusername = New DataColumn("username", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnusername)
            Me.columnuserpassword = New DataColumn("userpassword", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuserpassword)
            Me.columnusertype = New DataColumn("usertype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnusertype)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnusername}, true))
            Me.columnusername.AllowDBNull = false
            Me.columnusername.Unique = true
        End Sub
        
        Public Function NewtbluserRow() As tbluserRow
            Return CType(Me.NewRow,tbluserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tbluserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tbluserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbluserRowChangedEvent) Is Nothing) Then
                RaiseEvent tbluserRowChanged(Me, New tbluserRowChangeEvent(CType(e.Row,tbluserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbluserRowChangingEvent) Is Nothing) Then
                RaiseEvent tbluserRowChanging(Me, New tbluserRowChangeEvent(CType(e.Row,tbluserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbluserRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbluserRowDeleted(Me, New tbluserRowChangeEvent(CType(e.Row,tbluserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbluserRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbluserRowDeleting(Me, New tbluserRowChangeEvent(CType(e.Row,tbluserRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetbluserRow(ByVal row As tbluserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbluserRow
        Inherits DataRow
        
        Private tabletbluser As tbluserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbluser = CType(Me.Table,tbluserDataTable)
        End Sub
        
        Public Property username As String
            Get
                Return CType(Me(Me.tabletbluser.usernameColumn),String)
            End Get
            Set
                Me(Me.tabletbluser.usernameColumn) = value
            End Set
        End Property
        
        Public Property userpassword As String
            Get
                Try 
                    Return CType(Me(Me.tabletbluser.userpasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbluser.userpasswordColumn) = value
            End Set
        End Property
        
        Public Property usertype As String
            Get
                Try 
                    Return CType(Me(Me.tabletbluser.usertypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbluser.usertypeColumn) = value
            End Set
        End Property
        
        Public Function IsuserpasswordNull() As Boolean
            Return Me.IsNull(Me.tabletbluser.userpasswordColumn)
        End Function
        
        Public Sub SetuserpasswordNull()
            Me(Me.tabletbluser.userpasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsusertypeNull() As Boolean
            Return Me.IsNull(Me.tabletbluser.usertypeColumn)
        End Function
        
        Public Sub SetusertypeNull()
            Me(Me.tabletbluser.usertypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbluserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tbluserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tbluserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tbluserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
